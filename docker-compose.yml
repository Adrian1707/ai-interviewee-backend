version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - .:/app
    environment:
      - DEBUG=1
      - PYTHONUNBUFFERED=1
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Database connection for Django
      - DATABASE_URL=postgres://myuser:mypassword@db:5432/mydb
      - DB_HOST=db # This is the crucial one for the hostname inside Docker
      - DB_NAME=mydb
      - DB_USER=myuser
      - DB_PASSWORD=mypassword
      - DB_PORT=5432
      # OR individual variables:
      # - DB_HOST=db
      # - DB_NAME=mydb
      # - DB_USER=myuser
      # - DB_PASSWORD=mypassword
    depends_on:
      db:
        condition: service_healthy # Wait for the DB healthcheck
      redis:
        condition: service_started # Wait for Redis to start
    # Command to run your Django app (adjust based on your project)
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8080"
    restart: unless-stopped
    # stdin_open: true # Often not needed for web services
    # tty: true        # Often not needed for web services

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgres://myuser:mypassword@db:5432/mydb
      - DB_HOST=db
      - DB_NAME=mydb
      - DB_USER=myuser
      - DB_PASSWORD=mypassword
      - DB_PORT=5432
    depends_on:
      - web
      - redis
      - db # Add db as a dependency for celery_worker
    command: celery -A ai_interviewee worker -l info
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  db:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    volumes:
      - db_data:/var/lib/postgresql/data # Persist DB data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydb"]
      interval: 5s
      timeout: 5s
      retries: 5

  tests:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    environment:
      - DEBUG=1
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DJANGO_SETTINGS_MODULE=ai_interviewee.settings
      - DATABASE_URL=postgres://myuser:mypassword@db:5432/mydb
      - DB_HOST=db
      - DB_NAME=mydb
      - DB_USER=myuser
      - DB_PASSWORD=mypassword
      - DB_PORT=5432
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: 
      - sh
      - -c
      - |
        pytest tests/
    restart: never


  # test-db:
  #   image: pgvector/pgvector:pg15
  #   environment:
  #     - POSTGRES_DB=test_mydb
  #     - POSTGRES_USER=testuser
  #     - POSTGRES_PASSWORD=testpassword
  #   ports:
  #     - "5433:5432"  # Different port to avoid conflicts
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U testuser -d test_mydb"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5
  #   profiles:
  #     - test

volumes:
  db_data: # Define the named volume
  redis_data: # Define the named volume for Redis
